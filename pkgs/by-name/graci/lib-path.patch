diff --git a/graci/core/libs.py b/graci/core/libs.py
index d924894..9959f73 100644
--- a/graci/core/libs.py
+++ b/graci/core/libs.py
@@ -15,7 +15,7 @@ bitci_registry = {
                                  'double','int32','double','int32',
                                  'string','string','logical'],
     'bitci_finalise'          : [],
-    'bitci_int_initialize'    : ['string', 'string', 'string', 'string', 
+    'bitci_int_initialize'    : ['string', 'string', 'string', 'string',
                                  'string'],
     'bitci_int_finalize'      : [],
     'get_n_int'               : ['int32'],
@@ -210,9 +210,9 @@ def lib_load(name):
     # if we haven't loaded the bitX object, do so now
     if name not in lib_objs.keys() and name in libraries:
         # load the appropriate library
-        rel_path = '/graci/dep/lib/lib'+str(name)+'.{}'
-        path_str = os.environ['GRACI'] + rel_path
-        lib_path = path_str.format('so' if sys.platform != 'darwin' 
+        rel_path = '/lib/lib'+str(name)+'.{}'
+        path_str = "@GRACI@" + rel_path
+        lib_path = path_str.format('so' if sys.platform != 'darwin'
                                                       else 'dylib')
 
         if not os.path.isfile(lib_path):
@@ -243,17 +243,17 @@ def lib_func(name, args):
         arg_list   = overlap_registry[name]
         arg_intent = overlap_intent[name]
     else:
-        sys.exit('function: '+str(name)+' not found.') 
+        sys.exit('function: '+str(name)+' not found.')
 
     arg_ctype = []
     arg_ptr   = []
     for i in range(len(args)):
-        
+
         # if argument is a string, pad to a length of 255 characters
         if isinstance(args[i], str):
             arg = args[i].ljust(255)
         elif isinstance(args[i], list):
-            arg = [iarg.ljust(255) if isinstance(iarg, str) 
+            arg = [iarg.ljust(255) if isinstance(iarg, str)
                                 else iarg for iarg in args[i]]
         else:
             arg = args[i]
@@ -287,12 +287,12 @@ def lib_func(name, args):
             getattr(lib_objs['overlap'], name)(*arg_ptr)
         else:
             getattr(lib_objs['overlap'], name)()
-            
+
     args_out = ()
     for i in range(len(args)):
         if arg_intent[i] == 'out':
             if isinstance(args[i], list):
-                args_out += (np.ndarray((len(args[i]),), 
+                args_out += (np.ndarray((len(args[i]),),
                           buffer=arg_ctype[i], dtype=arg_list[i]),)
             elif isinstance(args[i], np.ndarray):
                 args_out += (np.ndarray((args[i].size,),
@@ -301,7 +301,7 @@ def lib_func(name, args):
                 args_out += (bytes.decode(arg_ctype[i].value),)
             else:
                 args_out += (arg_ctype[i].value,)
-    
+
     if len(args_out) == 1:
         return args_out[0]
     else:
@@ -309,7 +309,7 @@ def lib_func(name, args):
 
 #
 def lib_exists(name):
-    """check if the library name 'name' exists in 
+    """check if the library name 'name' exists in
        lib_objs dictionary"""
     global lib_objs
 
diff --git a/graci/utils/basis.py b/graci/utils/basis.py
index abdcb99..72b7d4e 100644
--- a/graci/utils/basis.py
+++ b/graci/utils/basis.py
@@ -8,7 +8,7 @@ import pyscf.gto as gto
 def local_basis_sets(local_dir=False, return_alias=False):
     """
     Return a list of available local basis sets by alias
-    name, i.e. with all special characters stripped 
+    name, i.e. with all special characters stripped
     and converted to lower-case
     """
     if local_dir:
@@ -17,12 +17,12 @@ def local_basis_sets(local_dir=False, return_alias=False):
         else:
             return []
     else:
-        bdir = os.environ['GRACI']+'/graci/utils/basis_sets'
+        bdir = "@GRACI@"+'/share/graci/basis_sets'
 
     basis_files = [f.replace('.dat','')
                    for f in os.listdir(bdir) if
                    os.path.isfile(os.path.join(bdir, f))]
-    
+
     if return_alias:
         return [basis_files[i].lower().replace('-','').replace('_','')
                                      for i in range(len(basis_files))]
@@ -40,7 +40,7 @@ def load_basis(atom, name, local_dir=False):
         else:
             return None
     else:
-        bdir = os.environ['GRACI']+'/graci/utils/basis_sets'
+        bdir = "@GRACI@"+'/share/graci/basis_sets'
 
     alias = name.lower().replace('-','').replace('_','')
     basis_avail = local_basis_sets(local_dir=local_dir)
@@ -77,11 +77,11 @@ def load_basis(atom, name, local_dir=False):
 #
 def str_to_contract(cstr):
     """
-    attempt to convert a string of the form XsYpZd, etc. to 
+    attempt to convert a string of the form XsYpZd, etc. to
     an array of contractions
     """
 
-    angmom = ['s','p','d','f','g','h','i'] 
+    angmom = ['s','p','d','f','g','h','i']
     ncon   = []
     constr = str(cstr)
 
@@ -99,11 +99,11 @@ def str_to_contract(cstr):
            constr = val[1]
            if len(constr) == 0:
                break
-           
+
         else:
             ncon.append(0)
- 
-    # if we didn't find any contractions, not valid 
+
+    # if we didn't find any contractions, not valid
     # constraction string
     if max(ncon) == 0:
         return None
