diff --git a/cmake/gauxc-linalg-modules.cmake b/cmake/gauxc-linalg-modules.cmake
index 69a69a7..8640328 100644
--- a/cmake/gauxc-linalg-modules.cmake
+++ b/cmake/gauxc-linalg-modules.cmake
@@ -1,11 +1,18 @@
 include( FetchContent )
 include( gauxc-dep-versions )
-FetchContent_Declare( linalg-cmake-modules 
-  GIT_REPOSITORY ${GAUXC_LINALG_MODULES_REPOSITORY} 
-  GIT_TAG        ${GAUXC_LINALG_MODULES_REVISION} 
-)
-FetchContent_GetProperties( linalg-cmake-modules )
-if( NOT linalg-cmake-modules_POPULATED )
-  FetchContent_Populate( linalg-cmake-modules )
-  list( PREPEND CMAKE_MODULE_PATH ${linalg-cmake-modules_SOURCE_DIR} )
-endif()
+
+set(LINALG_CMAKE_MODULES_DIR @LINALG_CMAKE_MODULES_DIR@)
+
+if(EXISTS ${LINALG_CMAKE_MODULES_DIR})
+  list(PREPEND CMAKE_MODULE_PATH ${LINALG_CMAKE_MODULES_DIR})
+else()
+  FetchContent_Declare( linalg-cmake-modules 
+    GIT_REPOSITORY ${GAUXC_LINALG_MODULES_REPOSITORY} 
+    GIT_TAG        ${GAUXC_LINALG_MODULES_REVISION} 
+  )
+  FetchContent_GetProperties( linalg-cmake-modules )
+  if( NOT linalg-cmake-modules_POPULATED )
+    FetchContent_Populate( linalg-cmake-modules )
+    list( PREPEND CMAKE_MODULE_PATH ${linalg-cmake-modules_SOURCE_DIR} )
+  endif()
+endif()
\ No newline at end of file
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 7e51e9f..752bfcc 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -28,7 +28,7 @@ include( gauxc-integratorxx )
 include( gauxc-exchcxx      )
 
 
-add_library( gauxc STATIC 
+add_library( gauxc 
   grid.cxx 
   grid_impl.cxx 
   grid_factory.cxx
@@ -222,5 +222,5 @@ install( FILES
 )
 
 # Install Custom Find Modules
-include( ${linalg-cmake-modules_SOURCE_DIR}/LinAlgModulesMacros.cmake )
+include( @LINALG_CMAKE_MODULES_DIR@/LinAlgModulesMacros.cmake )
 install_linalg_modules( INSTALL_CONFIGDIR )
diff --git a/src/external/CMakeLists.txt b/src/external/CMakeLists.txt
index 3df13b3..3f7bd62 100644
--- a/src/external/CMakeLists.txt
+++ b/src/external/CMakeLists.txt
@@ -11,19 +11,26 @@ if( GAUXC_ENABLE_HDF5 )
   if(HDF5_FOUND)
     set(GAUXC_HAS_HDF5 TRUE CACHE BOOL "" FORCE)
     message(STATUS "Enabling HDF5 Bindings")
-    message(STATUS "HighFive REPO = ${GAUXC_HIGHFIVE_REPOSITORY}")
-    message(STATUS "HighFive REV  = ${GAUXC_HIGHFIVE_REVISION}  ")
-    FetchContent_Declare( HighFive
-      GIT_REPOSITORY ${GAUXC_HIGHFIVE_REPOSITORY}
-      GIT_TAG        ${GAUXC_HIGHFIVE_REVISION}  
-    )
-    
-    set(HIGHFIVE_USE_BOOST OFF CACHE BOOL "" )
-    set(HIGHFIVE_UNIT_TESTS OFF CACHE BOOL "" )
-    set(HIGHFIVE_EXAMPLES OFF CACHE BOOL "" )
-    #set(HIGHFIVE_PARALLEL_HDF5 ON CACHE BOOL "" )
-    set(HIGHFIVE_BUILD_DOCS OFF CACHE BOOL "" )
-    FetchContent_MakeAvailable( HighFive )
+
+    find_package(HighFive)
+    if(HighFive_FOUND)
+      message(STATUS "Found installed HighFive")
+    else()
+      message(STATUS "HighFive not found, fetching from repository")
+      message(STATUS "HighFive REPO = ${GAUXC_HIGHFIVE_REPOSITORY}")
+      message(STATUS "HighFive REV  = ${GAUXC_HIGHFIVE_REVISION}  ")
+      FetchContent_Declare( HighFive
+        GIT_REPOSITORY ${GAUXC_HIGHFIVE_REPOSITORY}
+        GIT_TAG        ${GAUXC_HIGHFIVE_REVISION}  
+      )
+      
+      set(HIGHFIVE_USE_BOOST OFF CACHE BOOL "" )
+      set(HIGHFIVE_UNIT_TESTS OFF CACHE BOOL "" )
+      set(HIGHFIVE_EXAMPLES OFF CACHE BOOL "" )
+      #set(HIGHFIVE_PARALLEL_HDF5 ON CACHE BOOL "" )
+      set(HIGHFIVE_BUILD_DOCS OFF CACHE BOOL "" )
+      FetchContent_MakeAvailable( HighFive )
+    endif()
     
     target_sources( gauxc PRIVATE hdf5_write.cxx hdf5_read.cxx )
     target_link_libraries( gauxc PUBLIC HighFive )
@@ -32,4 +39,4 @@ if( GAUXC_ENABLE_HDF5 )
   endif()
 else()
   message(STATUS "Disabling HDF5 Bindings")
-endif()
+endif()
\ No newline at end of file
